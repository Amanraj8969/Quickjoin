package org.jhipster.quickjoin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClassesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesAllPropertiesEquals(Classes expected, Classes actual) {
        assertClassesAutoGeneratedPropertiesEquals(expected, actual);
        assertClassesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesAllUpdatablePropertiesEquals(Classes expected, Classes actual) {
        assertClassesUpdatableFieldsEquals(expected, actual);
        assertClassesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesAutoGeneratedPropertiesEquals(Classes expected, Classes actual) {
        assertThat(expected)
            .as("Verify Classes auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesUpdatableFieldsEquals(Classes expected, Classes actual) {
        assertThat(expected)
            .as("Verify Classes relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getTecher_name()).as("check techer_name").isEqualTo(actual.getTecher_name()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getDuration()).as("check duration").isEqualTo(actual.getDuration()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesUpdatableRelationshipsEquals(Classes expected, Classes actual) {}
}
